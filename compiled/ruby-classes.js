// Generated by CoffeeScript 1.6.2
(function() {
  var find_match, json_file, navigate, root_url, ruby_version, search, set_description, updateDefaultSuggestion, version;

  ruby_version = root_url = version = json_file = "";

  String.prototype.contains = function(str, startIndex) {
    if (startIndex == null) {
      startIndex = 0;
    }
    return -1 !== String.prototype.indexOf.call(this.toLowerCase(), str.toLowerCase(), startIndex);
  };

  Array.prototype.contains = function(str) {
    return -1 !== Array.prototype.indexOf.call(this, str);
  };

  set_description = function(name, url) {
    return "<match>" + name + "</match> <dim>" + version + " - </dim><url>" + url + "</url>";
  };

  navigate = function(url) {
    return chrome.tabs.query({
      active: true,
      currentWindow: true
    }, function(tabs) {
      return chrome.tabs.update(tabs[0].id, {
        url: url
      });
    });
  };

  search = function(query, callback) {
    var req;

    req = new XMLHttpRequest();
    req.open("GET", json_file, true);
    req.setRequestHeader("GData-Version", "2");
    req.onreadystatechange = function() {
      var json;

      if (req.readyState === 4) {
        json = JSON.parse(req.response);
        window.test = json['classes'].filter(function(e, i, a) {
          if (find_match(e, query)) {
            return e;
          }
        });
        return callback(window.test);
      }
    };
    req.send(null);
    return req;
  };

  find_match = function(element, query) {
    return element['name'].contains(query) && element['versions'].contains(ruby_version);
  };

  updateDefaultSuggestion = function(element) {
    var url;

    url = "" + root_url + element['urlpath'];
    return chrome.omnibox.setDefaultSuggestion({
      description: set_description(element['name'], url)
    });
  };

  chrome.omnibox.onInputStarted.addListener(function() {
    ruby_version = localStorage['ruby_version'] === void 0 ? '2.0' : localStorage['ruby_version'];
    root_url = "http://ruby-doc.org/core-" + ruby_version + "/";
    version = "Ruby Core " + ruby_version;
    return json_file = "ruby-classes.json";
  });

  chrome.omnibox.onInputChanged.addListener(function(text, suggest) {
    return search(text, function(elements) {
      var element, i, results, url, _i, _len;

      results = [];
      for (i = _i = 0, _len = elements.length; _i < _len; i = ++_i) {
        element = elements[i];
        if (i === 0) {
          updateDefaultSuggestion(element);
        } else {
          url = "" + root_url + element['urlpath'];
          results.push({
            content: url,
            description: set_description(element['name'], url)
          });
        }
      }
      return suggest(results);
    });
  });

  chrome.omnibox.onInputEntered.addListener(function(text) {
    if (text.contains("http") !== -1) {
      return navigate(text);
    } else {
      return search(text, function(elements) {
        var element, url;

        element = elements[0];
        url = "" + root_url + element['urlpath'];
        return navigate(url);
      });
    }
  });

}).call(this);
